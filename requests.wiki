= requests = 
[[ 高级部分]] |  [[FAQ]]
一个对人类比较友好的http, https请求库。

== requirements ==
{{{
import requests
from requests.utils import dict_from_cookiejar
}}}

== session ==
{{{
session = requests.session()
r = session.get('https://www.baidu.com')
r.encoding = 'utf-8'
print(r.text)
# 获取返回的cookies
print(dict_from_cookiejar(r.cookies))

# 获取session中被服务器设置的cookies
print(dict_from_cookiejar(session.cookies))
session.close()
}}}
需要注意的是，使用会话会增加对方服务器的压力，如果无限制的使用会话，会导致对方
服务器的响应速度变慢；还有一个需要注意的是，如果服务器向会话写入cookie值，以后
使用会话进行的请求，都会带上session的cookie（requests在这方面比其他的http库更
智能）

一个会话就是设置http请求头中的connection: keep-alive之后的请求。

== get请求 ==
{{{
# 这里会阻塞
r = requests.get('https://baidu.com')
# 获取返回响应状态，结果，并设置编码
print(r.status_code)
r.encodign = 'utf-8'
print(r.text)
# 获取二进制响应内容，这个是一个bytes类型
print(r.content) # 这个在有些时候，xpath不能用的时候可以尝试使用这个
# 如果返回的是json数据
print(r.json())
}}}

== get请求传递url参数 ==
{{{
pyload = {'key1': 'value1', 'key2': 'value2'}
r = requests.get("http://httpbin.org/get", params=payload)
# 获取url
print(r.url)
}}}

== 获取一张图片 ==
由于图片是bytes类型的数据
{{{
from PIL import Image
from io import BytesIO
r = requests.get("https://www.baidu.com/img/bd_logo1.png")
i = Image.open(BytesIO(r.content))
# 调用操作系统默认的图片软件，显示图片
i.show()
}}}

== json响应内容 ==
{{{
r = requests.get('https://github.com/timeline.json')
print(r.json())
}}}
如果 JSON 解码失败， r.json() 就会抛出一个异常。例如，响应内容是 401
(Unauthorized)，尝试访问 r.json() 将会抛出 ValueError: No JSON object could be
decoded 异常。

需要注意的是，成功调用 r.json()
并**不**意味着响应的成功。有的服务器会在失败的响应中包含一个 JSON 对象（比如
HTTP 500 的错误细节）。这种 JSON 会被解码返回。要检查请求是否成功，请使用
r.raise_for_status() 或者检查 r.status_code 是否和你的期望相同。

== 原始响应内容 ==
{{{
r = requests.get('https://github.com/timeline.json', stream=True)
print(r.raw)
print(r.raw.read(10))
}}}

但一般情况下，你应该以下面的模式将文本流保存到文件：
with open(filename, 'wb') as fd:
    for chunk in r.iter_content(chunk_size):
        fd.write(chunk)
使用 Response.iter_content 将会处理大量你直接使用 Response.raw
不得不处理的。 当流下载时，上面是优先推荐的获取内容方式。 Note that
chunk_size can be freely adjusted to a number that may better fit
your use cases.

== 定制请求头 ==
如果你想为请求添加 HTTP 头部，只要简单地传递一个 dict 给 headers 参数就可以了。

例如，在前一个示例中我们没有指定 content-type:

>>> url = 'https://api.github.com/some/endpoint'
>>> headers = {'user-agent': 'my-app/0.0.1'}

>>> r = requests.get(url, headers=headers)
注意: 定制 header 的优先级低于某些特定的信息源，例如：

如果在 .netrc 中设置了用户认证信息，使用 headers=
设置的授权就不会生效。而如果设置了 auth= 参数，``.netrc`` 的设置就无效了。
如果被重定向到别的主机，授权 header 就会被删除。
代理授权 header 会被 URL 中提供的代理身份覆盖掉。
在我们能判断内容长度的情况下，header 的 Content-Length 会被改写。
更进一步讲，Requests 不会基于定制 header
的具体情况改变自己的行为。只不过在最后的请求中，所有的 header
信息都会被传递进去。

注意: 所有的 header 值必须是 string、bytestring 或者 unicode。尽管传递 unicode
header 也是允许的，但不建议这样做。

== 更复杂的post请求 ==
通常，你想要发送一些编码为表单形式的数据——非常像一个 HTML 表单。要实现这个，
只需简单地传递一个字典给 data 参数。你的数据字典在发出请求时会自动编码为表单形
式：

>>> payload = {'key1': 'value1', 'key2': 'value2'}

>>> r = requests.post("http://httpbin.org/post", data=payload)
>>> print(r.text)
{
  ...
  "form": {
    "key2": "value2",
    "key1": "value1"
  },
  ...
}

你还可以为 data 参数传入一个元组列表。在表单中多个元素使用同一 key 的时候，
这种方式尤其有效：

>>> payload = (('key1', 'value1'), ('key1', 'value2'))
>>> r = requests.post('http://httpbin.org/post', data=payload)
>>> print(r.text)
{
  ...
  "form": {
    "key1": [
      "value1",
      "value2"
    ]
  },
  ...
}

很多时候你想要发送的数据并非编码为表单形式的。如果你传递一个 string 而不是一个
 dict，那么数据会被直接发布出去。

例如，Github API v3 接受编码为 JSON 的 POST/PATCH 数据：

>>> import json

>>> url = 'https://api.github.com/some/endpoint'
>>> payload = {'some': 'data'}

>>> r = requests.post(url, data=json.dumps(payload))


此处除了可以自行对 dict 进行编码，你还可以使用 json 参数直接传递，然后它就会被
自动编码。这是 2.4.2 版的新加功能：

>>> url = 'https://api.github.com/some/endpoint'
>>> payload = {'some': 'data'}

>>> r = requests.post(url, json=payload)
POST一个多部分编码(Multipart-Encoded)的文件
Requests 使得上传多部分编码文件变得很简单：

>>> url = 'http://httpbin.org/post'
>>> files = {'file': open('report.xls', 'rb')}

>>> r = requests.post(url, files=files)
>>> r.text
{
  ...
  "files": {
    "file": "<censored...binary...data>"
  },
  ...
}
你可以显式地设置文件名，文件类型和请求头：

>>> url = 'http://httpbin.org/post'
>>> files = {'file': ('report.xls', open('report.xls', 'rb'), 'application/vnd.ms-excel', {'Expires': '0'})}

>>> r = requests.post(url, files=files)
>>> r.text
{
  ...
  "files": {
    "file": "<censored...binary...data>"
  },


如果你想，你也可以发送作为文件来接收的字符串：

>>> url = 'http://httpbin.org/post'
>>> files = {'file': ('report.csv', 'some,data,to,send\nanother,row,to,send\n')}

>>> r = requests.post(url, files=files)
>>> r.text
{
  ...
  "files": {
    "file": "some,data,to,send\\nanother,row,to,send\\n"
  },
  ...
}
如果你发送一个非常大的文件作为 multipart/form-data 请求，你可能希望将请求做成
数据流。默认下 requests 不支持, 但有个第三方包 requests-toolbelt 是支持的。你
可以阅读 toolbelt 文档 来了解使用方法。

在一个请求中发送多文件参考 高级用法 一节。

警告
我们强烈建议你用二进制模式(binary mode)打开文件。这是因为 Requests 可能会试图
为你提供 Content-Length header，在它这样做的时候，这个值会被设为文件的字节数
（bytes）。如果用文本模式(text mode)打开文件，就可能会发生错误。

== 响应状态码 ==
我们可以检测响应状态码：

>>> r = requests.get('http://httpbin.org/get')
>>> r.status_code
200
为方便引用，Requests还附带了一个内置的状态码查询对象：

>>> r.status_code == requests.codes.ok
True
如果发送了一个错误请求(一个 4XX 客户端错误，或者 5XX 服务器错误响应)，我们可以
通过 Response.raise_for_status() 来抛出异常：

>>> bad_r = requests.get('http://httpbin.org/status/404')
>>> bad_r.status_code
404

>>> bad_r.raise_for_status()
Traceback (most recent call last):
  File "requests/models.py", line 832, in raise_for_status
    raise http_error
requests.exceptions.HTTPError: 404 Client Error
但是，由于我们的例子中 r 的 status_code 是 200 ，当我们调用 raise_for_status()
时，得到的是：

>>> r.raise_for_status()
None
一切都挺和谐哈。

== 响应头 ==
我们可以查看以一个 Python 字典形式展示的服务器响应头：

>>> r.headers
{
    'content-encoding': 'gzip',
    'transfer-encoding': 'chunked',
    'connection': 'close',
    'server': 'nginx/1.0.4',
    'x-runtime': '148ms',
    'etag': '"e1ca502697e5c9317743dc078f67693f"',
    'content-type': 'application/json'
}
但是这个字典比较特殊：它是仅为 HTTP 头部而生的。根据 RFC 2616， HTTP 头部是大
小写不敏感的。

因此，我们可以使用任意大写形式来访问这些响应头字段：

>>> r.headers['Content-Type']
'application/json'

>>> r.headers.get('content-type')
'application/json'
它还有一个特殊点，那就是服务器可以多次接受同一 header，每次都使用不同的值。但 
Requests 会将它们合并，这样它们就可以用一个映射来表示出来，参见 RFC 7230:

A recipient MAY combine multiple header fields with the same field name into one "field-name: field-value" pair, without changing the semantics of the message, by appending each subsequent field value to the combined field value in order, separated by a comma.

接收者可以合并多个相同名称的 header 栏位，把它们合为一个 
"field-name: field-value" 配对，将每个后续的栏位值依次追加到合并的栏位值中，用
逗号隔开即可，这样做不会改变信息的语义。


== cookies ==
如果某个响应中包含一些 cookie，你可以快速访问它们：

>>> url = 'http://example.com/some/cookie/setting/url'
>>> r = requests.get(url)

>>> r.cookies['example_cookie_name']
'example_cookie_value'
要想发送你的cookies到服务器，可以使用 cookies 参数：

>>> url = 'http://httpbin.org/cookies'
>>> cookies = dict(cookies_are='working')

>>> r = requests.get(url, cookies=cookies)
>>> r.text
'{"cookies": {"cookies_are": "working"}}'
Cookie 的返回对象为 RequestsCookieJar，它的行为和字典类似，但界面更为完整，适
合跨域名跨路径使用。你还可以把 Cookie Jar 传到 Requests 中：

>>> jar = requests.cookies.RequestsCookieJar()
>>> jar.set('tasty_cookie', 'yum', domain='httpbin.org', path='/cookies')
>>> jar.set('gross_cookie', 'blech', domain='httpbin.org', path='/elsewhere')
>>> url = 'http://httpbin.org/cookies'
>>> r = requests.get(url, cookies=jar)
>>> r.text
'{"cookies": {"tasty_cookie": "yum"}}'


== 重定向与请求历史 ==
默认情况下，除了 HEAD, Requests 会自动处理所有重定向。

可以使用响应对象的 history 方法来追踪重定向。

Response.history 是一个 Response 对象的列表，为了完成请求而创建了这些对象。这
个对象列表按照从最老到最近的请求进行排序。

例如，Github 将所有的 HTTP 请求重定向到 HTTPS：

>>> r = requests.get('http://github.com')

>>> r.url
'https://github.com/'

>>> r.status_code
200

>>> r.history
[<Response [301]>]
如果你使用的是GET、OPTIONS、POST、PUT、PATCH 或者 DELETE，那么你可以通过 
allow_redirects 参数禁用重定向处理：

>>> r = requests.get('http://github.com', allow_redirects=False)
>>> r.status_code
301
>>> r.history
[]
如果你使用了 HEAD，你也可以启用重定向：

>>> r = requests.head('http://github.com', allow_redirects=True)
>>> r.url
'https://github.com/'
>>> r.history
[<Response [301]>]

== 超时 ==
你可以告诉 requests 在经过以 timeout 参数设定的秒数时间之后停止等待响应。基本上
所有的生产代码都应该使用这一参数。如果不使用，你的程序可能会永远失去响应：

>>> requests.get('http://github.com', timeout=0.001)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
requests.exceptions.Timeout: HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)
注意
timeout 仅对连接过程有效，与响应体的下载无关。 timeout 并不是整个下载响应的时
间限制，而是如果服务器在 timeout 秒内没有应答，将会引发一个异常（更精确地说，
是在 timeout 秒内没有从基础套接字上接收到任何字节的数据时）If no timeout is 
specified explicitly, requests do not time out.

== 错误和异常 ==
遇到网络问题（如：DNS 查询失败、拒绝连接等）时，Requests 会抛出一个
ConnectionError 异常。

如果 HTTP 请求返回了不成功的状态码， Response.raise_for_status() 会抛出一个 
HTTPError 异常。

若请求超时，则抛出一个 Timeout 异常。

若请求超过了设定的最大重定向次数，则会抛出一个 TooManyRedirects 异常。

所有Requests显式抛出的异常都继承自 requests.exceptions.RequestException 。
